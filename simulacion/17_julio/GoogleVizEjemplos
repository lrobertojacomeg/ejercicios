#práctica disponible en:
#http://cran.r-project.org/web/packages/googleVis/vignettes/googleVis_examples.html

install.packages("googleVis")
library(googleVis)



#Line Chart
df=data.frame(ciudad=c("Loja", "Cuenca", "Ambato"), 
              val1=c(150,300,230), 
              val2=c(10,20,15),
              empresas=c(40, 3, 85))

mode(df)
df
Line <- gvisLineChart(df)
plot(Line)


#####################################################

library(help = "datasets")  #listado de todos los datasets disponibles

WorldPhones   # llamar a dataset
help(WorldPhones)

head(WorldPhones, 10)  #mostrar los 10 primeros elementos
tail(WorldPhones, 10)  #mostrar los 10 últimos elementos


#Gauge
pop=data.frame(ciudad=c("Loja", "Cuenca", "Ambato"), poblacion=c(200, 400, 150))
Gauge <-  gvisGauge(pop, 
                    options=list(min=0, max=800, greenFrom=500,
                                 greenTo=800, yellowFrom=300, yellowTo=500,
                                 redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)


#################################################
#Histograma
set.seed(123)  # establecer la semilla nos permite
# obtener siempre los mismos aleatorios
datHist=data.frame(A=rpois(100, 20),
                   B=rpois(100, 5),
                   C=rpois(100, 50))

Hist <- gvisHistogram(datHist, options=list(
  legend="{ position: 'top', maxLines: 2 }",
  colors="['#5C3292', '#1A8763', '#871B47']",
  width=400, height=360))
plot(Hist)


####################################################
#Bar Chart
Bar <- gvisBarChart(df)
plot(Bar)


#diagrama de columnas
Column <- gvisColumnChart(df)
plot(Column)


#gráfica de Area
Area <- gvisAreaChart(df)
plot(Area)


# grafica de area: STEP
#xvar y yvar debe ser nombres de campos
SteppedArea <- gvisSteppedAreaChart(df, xvar="ciudad", 
                                    yvar=c("val1", "val2", "empresas"),
                                    options=list(isStacked=TRUE))
plot(SteppedArea)


###################################################
women
help(women)
head(women)
#scatter
Scatter <- gvisScatterChart(women, 
                            options=list(
                              legend="none",
                              lineWidth=2, pointSize=0,
                              title="Women", vAxis="{title:'weight (lbs)'}",
                              hAxis="{title:'height (in)'}", 
                              width=300, height=300))
plot(Scatter)

######################################################
#burbuja
Fruits

Bubble <- gvisBubbleChart(Fruits, idvar="Fruit", 
                          xvar="Sales", yvar="Expenses",
                          colorvar="Year", sizevar="Profit",
                          options=list(
                            hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)

Fruits
head(Fruits)
Fruits$Fruit
Fruits$Sales
Fruits[3,1]
Fruits[2,]

##########################################################
#personalizar lineas
Dashed <-  gvisLineChart(df, xvar="ciudad", yvar=c("val1","val2", "empresas"),
                         options=list(
                           series="[{color:'green', targetAxisIndex: 0, 
                           lineWidth: 1, lineDashStyle: [2, 2, 20, 2, 20, 2]}, 
                           {color: 'blue',targetAxisIndex: 1, 
                           lineWidth: 2, lineDashStyle: [4, 1, 1]}]",
                           vAxes="[{title:'val1'}, {title:'val2'}, {title:'empresas'}]"
                         ))
plot(Dashed)


####################################################
#personalizar puntos
M <- matrix(nrow=6,ncol=6)
M[col(M)==row(M)] <- 1:6    #llenar la diagonal principal de la matriz
dat <- data.frame(X=1:6, M)
SC <- gvisScatterChart(dat, 
                       options=list(
                         title="Personaliza puntos",
                         legend="right",
                         pointSize=30,
                         series="{
                         0: { pointShape: 'circle' },
                         1: { pointShape: 'triangle' },
                         2: { pointShape: 'square' },
                         3: { pointShape: 'diamond' },
                         4: { pointShape: 'star' },
                         5: { pointShape: 'polygon' }
                         }"))
plot(SC)

#########################################################

#configurar gráfica
Line4 <-  gvisLineChart(df, "ciudad", c("val1","val2"),
                        options=list(gvis.editor="Editar!"))
plot(Line4)



############################################################
#chart con varias opciones
Line3 <-  gvisLineChart(df, xvar="ciudad", yvar=c("val1","val2"),
                        options=list(
                          title="Comparacion ciudades",
                          titleTextStyle="{color:'red', 
                          fontName:'Courier', 
                          fontSize:16}",                         
                          backgroundColor="#D3D3D3",                          
                          vAxis="{gridlines:{color:'red', count:3}}",
                          hAxis="{title:'Ciudades', titleTextStyle:{color:'blue'}}",
                          series="[{color:'green', targetAxisIndex: 0}, 
                          {color: 'orange',targetAxisIndex:1}]",
                          vAxes="[{title:'val1'}, {title:'val2'}]",
                          legend="bottom",
                          curveType="function",
                          width=500,
                          height=300                         
                        ))
plot(Line3)


#########################################################
#candlestick
head(OpenClose)
Candle <- gvisCandlestickChart(OpenClose, 
                               options=list(legend='none'))
plot(Candle)

ventas=data.frame(meses=c("Enero", "Febrero", "Marzo"), 
                  low=c(150,100,80), 
                  open=c(200,120,115),
                  close=c(400, 243, 385),
                  high=c(600, 560, 700))

Candle <- gvisCandlestickChart(ventas, 
                               options=list(legend='none'))
plot(Candle)


###########################################
#exports
Geo=gvisGeoChart(paises, locationvar="country", 
                 colorvar="val2")
plot(Geo)


############################################


head(state.name)
head(state.x77)
# estados
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
                          options=list(region="US", 
                                       displayMode="regions", 
                                       resolution="provinces",
                                       width=600, height=400))
plot(GeoStates)

########################################
#mapa
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip", 
                     options=list(showTip=TRUE, 
                                  showLine=TRUE, 
                                  enableScrollWheel=TRUE,
                                  mapType='terrain', 
                                  useMapTypeControl=TRUE))
plot(AndrewMap)


############################################

#tabla inventario
cod <- c(1:7)
prod <- c('Teclado genius', 'Monitor LED', 'Memoria USB', 'Raton Genius',
          'Portatil HP', 'Scanner plano', 'Samsumg S3 mini')
cant <- c(45, 31, 100, 56, 4, 5, 10)
pvp <- c(15, 90, 10, 10, 560, 120, 230)
pagado <- c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE)
fecha <- c(rep(as.Date("14/05/15","%d/%m/%y"), 7))

inventario <- data.frame(cod=cod, prod=prod, cant=cant, pvp=pvp, total = cant*pvp, pagado=pagado, fecha=fecha)
Table <- gvisTable(inventario)
plot(Table)


#población mundial
#tabla paginación
head(Population)
head(Population[,1:3])
PopTable <- gvisTable(Population, 
                      formats=list(Population="#,###",
                                   '% of World Population'='#.#%'),
                      options=list(page='enable'))
plot(PopTable)

#####################################

#sankey chart
datSK <- data.frame(From=c(rep("A",3), rep("B", 3)),
                    To=c(rep(c("X", "Y", "Z"),2)),
                    Weight=c(5,7,6,2,9,4))

Sankey <- gvisSankey(datSK, from="From", to="To", weight="Weight",
                     options=list(
                       sankey="{link: {color: { fill: '#d799ae' } },
                       node: { color: { fill: '#a61d4c' },
                       label: { color: '#871b47' } }}"))
plot(Sankey)

########################################
#time line
datTL <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)),
                    Name=c("Washington", "Adams", "Jefferson",
                           "Adams", "Jefferson", "Burr"),
                    start=as.Date(x=rep(c("1789-03-29", "1797-02-03", 
                                          "1801-02-03"),2)),
                    end=as.Date(x=rep(c("1797-02-03", "1801-02-03", 
                                        "1809-02-03"),2)))



Timeline <- gvisTimeline(data=datTL, 
                         rowlabel="Name",
                         barlabel="Position",
                         start="start", 
                         end="end",
                         options=list(timeline="{groupByRowLabel:false}",
                                      backgroundColor='#ffd', 
                                      height=350,
                                      colors="['#cbb69d', '#603913', '#c69c6e']"))
plot(Timeline)

#presidentes
presidentes <- data.frame(Cargo=c("Presidente", "Presidente", "Presidente", "Vice", "Vice", "Vice"),
                          Nombre=c("Lucio Gutierrez", "Alfredo Palacio", "Rafael Correa", "Alfredo Palacio", "Alejandro Serrano", "Lenin Moreno"),
                          Inicio=c(as.Date("2003/01/15"), as.Date("2005/04/20"), as.Date("2007/01/15"), as.Date("2003/01/15"), as.Date("2005/04/20"), as.Date("2007/01/15")),
                          Fin=   c(as.Date("2005/04/20"), as.Date("2007/01/14"), as.Date("2015/09/22"), as.Date("2005/04/20"), as.Date("2007/01/14"), as.Date("2015/09/22"))
)                          

Timeline <- gvisTimeline(data=presidentes, 
                         rowlabel="Nombre",
                         barlabel="Cargo",
                         start="Inicio", 
                         end="Fin",
                         options=list(timeline="{groupByRowLabel:false}",
                                      backgroundColor='#ffd', 
                                      height=350,
                                      colors="['#cbb69d', '#603913', '#c69c6e']"))
plot(Timeline)



#organigrama
Org <- gvisOrgChart(Regions, 
                    options=list(width=600, height=250,
                                 size='large', allowCollapse=TRUE))
plot(Org)







#################################
Temperatura <- data.frame(id=c(1,2,3,4,5),
                          Fecha=c(as.Date("2023-12-07"), as.Date("2023-12-08"), as.Date("2023-12-09"), as.Date("2023-12-10"), as.Date("2023-12-11")),
                          Temp=c(20,15,18,19,18)
)
Cal <- gvisCalendar(Temperatura, 
                    datevar="Fecha", 
                    numvar="Temp",
                    options=list(
                      title="Temperatura en Loja",
                      height=640,
                      calendar="{yearLabel: { fontName: 'Times-Roman',
                      fontSize: 32, color: '#1A8763', bold: true},
                      cellSize: 10,
                      cellColor: { stroke: 'red', strokeOpacity: 0.2 },
                      focusedCellColor: {stroke:'red'}}")
                    )
plot(Cal)

inventario

AnnoTimeLine  <- gvisAnnotatedTimeLine(inventario, 
                                       datevar="fecha",
                                       numvar="total", 
                                       idvar="cod",
                                       titlevar="prod", 
                                       annotationvar="prod",
                                       options=list(displayAnnotations=TRUE,
                                                    width="600px", height="350px"))
plot(AnnoTimeLine)
